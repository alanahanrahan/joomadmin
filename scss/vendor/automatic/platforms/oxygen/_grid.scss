// Load grid classes
@include load-grid--has-nested(section, ".ct-section-inner-wrap");





// Deprecated in 2.6 ... delete in 2.7:

// // Grids
// @if $option-grid == on {
//   @each $grid-type, $col-set in $grids {
//     @each $col-count, $value in $col-set {
//       .grid--#{$col-count}:not(.ct-section),
//       .ct-section.grid--#{$col-count} .ct-section-inner-wrap {
//         display: grid !important;
//         grid-template-columns: #{$value};
//         inline-size: 100%;

//         @if $col-count == "1" {
//           > * {
//             grid-column: 1 !important;
//           }
//         }
//       }
//     }
//   }

  // // Grid Breakpoints
  // @each $breakpoint, $value in $breakpoints {
  //   @include breakpoint($breakpoint) {
  //     @each $grid-type, $col-set in $grids {
  //       @each $col-count, $colValue in $col-set {
  //         @if $grid-type == standard {
  //           .grid--#{$breakpoint}-#{$col-count}:not(.ct-section),
  //           .ct-section.grid--#{$breakpoint}-#{$col-count} .ct-section-inner-wrap {
  //             grid-template-columns: #{$colValue};

  //             @if $col-count == "1" {
  //               > * {
  //                 grid-column: 1 !important;
  //               }
  //             }
  //           }
  //         }
  //       }
  //     }
  //   }
  // }

//   // Alternating Grids

//   @each $breakpoint, $value in $breakpoints {
//     @include breakpoint-up($breakpoint) {
//       @each $grid, $value in $gridsReversed {
//         .grid--alternate-#{$breakpoint}:not(.ct-section),
//         .grid--alternate-#{$breakpoint} .ct-section-inner-wrap {
//           > .grid--#{$grid}:nth-of-type(even) {
//             grid-template-columns: #{$value};
//             > *:last-child {
//               order: -1;
//             }
//           }
//         }
//       }
//     }
//   }

  // // Auto Staggered Grid Mobile Fix

  // @include breakpoint(l) {
  //   .grid--auto-1-2:not(.ct-section),
  //   .ct-section.grid--auto-1-2 .ct-section-inner-wrap {
  //     display: grid !important;
  //     grid-template-columns: repeat(
  //       auto-fit,
  //       minmax(min(#{$auto-break-3}, 100vw - #{$auto-grid-math}), 1fr)
  //     );
  //   }
  //   .grid--auto-1-3:not(.ct-section),
  //   .ct-section.grid--auto-1-3 .ct-section-inner-wrap {
  //     display: grid !important;
  //     grid-template-columns: repeat(
  //       auto-fit,
  //       minmax(min(#{$auto-break-3}, 100vw - #{$auto-grid-math}), 1fr)
  //     );
  //   }
  //   .grid--auto-3-2:not(.ct-section),
  //   .ct-section.grid--auto-3-2 .ct-section-inner-wrap {
  //     display: grid !important;
  //     grid-template-columns: repeat(
  //       auto-fit,
  //       minmax(min(#{$auto-break-3}, 100vw - #{$auto-grid-math}), 1fr)
  //     );
  //   }
  //   .grid--auto-2-3:not(.ct-section),
  //   .ct-section.grid--auto-2-3 .ct-section-inner-wrap {
  //     display: grid !important;
  //     grid-template-columns: repeat(
  //       auto-fit,
  //       minmax(min(#{$auto-break-3}, 100vw - #{$auto-grid-math}), 1fr)
  //     );
  //   }
  //   .grid--auto-2-1:not(.ct-section),
  //   .ct-section.grid--auto-2-1 .ct-section-inner-wrap {
  //     display: grid !important;
  //     grid-template-columns: repeat(
  //       auto-fit,
  //       minmax(min(#{$auto-break-3}, 100vw - #{$auto-grid-math}), 1fr)
  //     );
  //   }
  //   .grid--auto-3-1:not(.ct-section),
  //   .ct-section.grid--auto-3-1 .ct-section-inner-wrap {
  //     display: grid !important;
  //     grid-template-columns: repeat(
  //       auto-fit,
  //       minmax(min(#{$auto-break-3}, 100vw - #{$auto-grid-math}), 1fr)
  //     );
  //   }
  // }

// // Grid Gaps
// @if $option-gaps == on {
//   @each $size, $extension in $sizeExtensions {
//     .gap--#{$extension}:not(.ct-section),
//     .ct-section.gap--#{$extension} > .ct-section-inner-wrap {
//       @if $size == xs {
//         @include map-get-gap(xs);
//       } @else if $size == s {
//         @include map-get-gap(s);
//       } @else if $size == m {
//         @include map-get-gap(m);
//       } @else if $size == l {
//         @include map-get-gap(l);
//       } @else if $size == xl {
//         @include map-get-gap(xl);
//       } @else if $size == xxl {
//         @include map-get-gap(xxl);
//       }
//     }
//   }
//   @each $breakpoint, $value in $breakpoints {
//     @include breakpoint($breakpoint) {
//       @each $size, $extension in $sizeExtensions {
//         .gap--#{$breakpoint}-#{$extension}:not(.ct-section),
//         .ct-section.gap--#{$breakpoint}-#{$extension} > .ct-section-inner-wrap {
//           @if $size == xs {
//             @include map-get-gap(xs);
//           } @else if $size == s {
//             @include map-get-gap(s);
//           } @else if $size == m {
//             @include map-get-gap(m);
//           } @else if $size == l {
//             @include map-get-gap(l);
//           } @else if $size == xl {
//             @include map-get-gap(xl);
//           } @else if $size == xxl {
//             @include map-get-gap(xxl);
//           }
//         }
//       }
//     }
//   }
// }
